name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql, redis, curl, xml
          tools: composer:v2
          ini-values: memory_limit=512M, max_execution_time=180
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/src/vendor
          key: ${{ runner.os }}-php-8.3-composer-${{ hashFiles('backend/src/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-8.3-composer-
            ${{ runner.os }}-composer-

      - name: Install backend dependencies
        working-directory: backend/src
        run: composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader

      - name: Create environment file
        working-directory: backend/src
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Update .env for testing
        working-directory: backend/src
        run: |
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env

      - name: Wait for MySQL to be ready
        run: |
          until mysql --host=127.0.0.1 --port=3306 --user=root --password=password -e "SELECT 1"; do
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run database migrations
        working-directory: backend/src
        run: php artisan migrate --env=testing --force

      - name: Verify health endpoint
        working-directory: backend/src
        run: |
          php artisan serve --host=127.0.0.1 --port=8000 &
          sleep 5
          curl -f http://127.0.0.1:8000/api/health || exit 1
          pkill -f "artisan serve"

      - name: Check PHP version
        working-directory: backend/src
        run: |
          echo "PHP Version:"
          php -v
          echo "PHP Modules:"
          php -m | grep -E "(mysql|pdo|mbstring|dom|fileinfo|redis)"
          echo "Composer version:"
          composer --version

      - name: Run backend tests
        working-directory: backend/src
        run: |
          echo "Running backend tests..."
          # Check if PHPUnit is available
          if [ -f vendor/bin/phpunit ]; then
            echo "Using PHPUnit directly"
            chmod +x vendor/bin/phpunit
            vendor/bin/phpunit --testdox
          else
            echo "Using Laravel Artisan test command"
            php artisan test --testdox
          fi
        continue-on-error: false

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          # Clear npm cache to avoid native binding issues
          npm cache clean --force
          # Remove existing node_modules to ensure clean install
          rm -rf node_modules || true
          # Install dependencies with rebuild for native modules
          npm ci --force
          # Set proper permissions for node_modules/.bin
          chmod -R 755 node_modules/.bin || true
          # Make sure nuxt binary is executable
          if [ -f node_modules/.bin/nuxt ]; then chmod +x node_modules/.bin/nuxt; fi

      - name: Prepare Nuxt
        working-directory: frontend
        run: |
          # Run nuxt prepare separately to catch any issues
          npm run prepare || echo "Nuxt prepare failed, continuing..."

      - name: Run frontend tests
        working-directory: frontend
        run: |
          echo "Running frontend tests..."
          npm run test:run
        continue-on-error: false

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2
          ini-values: memory_limit=512M

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend/src && composer install --no-progress --no-interaction
          cd ../../frontend && npm cache clean --force && rm -rf node_modules && npm ci --force && chmod -R 755 node_modules/.bin

      - name: Run PHP CS Fixer (if configured)
        working-directory: backend/src
        run: |
          if [ -f .php-cs-fixer.php ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff
          else
            echo "PHP CS Fixer not configured, skipping..."
          fi
        continue-on-error: true

      - name: Run ESLint (if configured)
        working-directory: frontend
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
            npx eslint . --ext .js,.vue,.ts
          else
            echo "ESLint not configured, skipping..."
          fi
        continue-on-error: true

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2
          ini-values: memory_limit=512M

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd backend/src && composer install --no-dev --no-progress --no-interaction
          cd ../../frontend && npm cache clean --force && rm -rf node_modules && npm ci --force && chmod -R 755 node_modules/.bin

      - name: Run Composer security audit
        working-directory: backend/src
        run: composer audit

      - name: Run npm security audit
        working-directory: frontend
        run: npm audit --audit-level moderate

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-and-format, security-check]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p 8022 -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          ssh -p 8022 -i ~/.ssh/id_ed25519 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e  # Exit on any error
            
            echo "🚀 Starting deployment..."
            cd /home/jarvis/project/idea/project_management
            
            echo "📥 Pulling latest changes..."
            git pull
            
            echo "🐳 Building and starting containers..."
            docker compose down || true
            # Force rebuild without cache to ensure fresh build
            docker compose build --no-cache
            docker compose up -d
            
            # Wait for containers to be ready
            echo "⏳ Waiting for containers to start..."
            sleep 15
            
            echo "🗄️ Running database setup..."
            # Use -T flag to disable TTY allocation for non-interactive commands
            docker compose exec -T backend php artisan migrate --force || echo "❌ Migration failed"
            docker compose exec -T backend php artisan db:seed --force || echo "ℹ️ Seeding skipped (might already exist)"
            
            echo "🧹 Cleaning up users (keeping only admin)..."
            docker compose exec -T backend php artisan users:cleanup --force || echo "ℹ️ User cleanup completed or skipped"
            
            echo "🧪 Running production health checks..."
            docker compose exec -T backend php artisan migrate:status || echo "Migration status check failed"
            
            echo "⚡ Optimizing application..."
            docker compose exec -T backend php artisan config:cache || echo "Config cache failed"
            docker compose exec -T backend php artisan route:cache || echo "Route cache failed"
            docker compose exec -T backend php artisan view:cache || echo "View cache failed"
            
            echo "🔍 Verifying deployment..."
            docker ps | grep project_management || echo "Container status check"
            
            # Basic smoke test
            echo "🌐 Running smoke tests..."
            # Try multiple endpoints to ensure the system is working
            docker compose exec -T backend curl -f http://localhost:8000/api/health || echo "Health check failed"
            docker compose exec -T backend curl -f http://localhost:8000/api/test || echo "Test endpoint failed"
            
            echo "✅ Deployment completed successfully!"
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi